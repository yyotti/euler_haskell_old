module Problem.P034Spec (main, spec) where

import Test.Hspec
import Problem.P034

main :: IO ()
main = hspec spec

spec :: Spec
spec = do
  describe "facts" $ do
    it "is [1,1,2,6,24,120,720,5040,40320,362880]" $ do
      facts `shouldBe` [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880]

  describe "nums" $ do
    it "returns [[3],[4],[5],[6],[7],[8],[9]] when k = 1" $ do
      nums 1 `shouldBe` [[3], [4], [5], [6], [7], [8], [9]]
    it "returns [[1,1],[1,2],[1,3],..,[9,9]] when k = 2" $ do
      let ns = [
            [1, 1], [1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9],
            [2, 2], [2, 3], [2, 4], [2, 5], [2, 6], [2, 7], [2, 8], [2, 9],
            [3, 3], [3, 4], [3, 5], [3, 6], [3, 7], [3, 8], [3, 9],
            [4, 4], [4, 5], [4, 6], [4, 7], [4, 8], [4, 9],
            [5, 5], [5, 6], [5, 7], [5, 8], [5, 9],
            [6, 6], [6, 7], [6, 8], [6, 9],
            [7, 7], [7, 8], [7, 9],
            [8, 8], [8, 9],
            [9, 9]
            ]
      nums 2 `shouldBe` ns
    it "returns [[1,1,1],[1,1,2],[1,1,3],..,[9,9,9]] when k = 3" $ do
      let ns = [
            [1, 1, 1], [1, 1, 2], [1, 1, 3], [1, 1, 4], [1, 1, 5], [1, 1, 6], [1, 1, 7], [1, 1, 8], [1, 1, 9],
            [1, 2, 2], [1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 2, 6], [1, 2, 7], [1, 2, 8], [1, 2, 9],
            [1, 3, 3], [1, 3, 4], [1, 3, 5], [1, 3, 6], [1, 3, 7], [1, 3, 8], [1, 3, 9],
            [1, 4, 4], [1, 4, 5], [1, 4, 6], [1, 4, 7], [1, 4, 8], [1, 4, 9],
            [1, 5, 5], [1, 5, 6], [1, 5, 7], [1, 5, 8], [1, 5, 9],
            [1, 6, 6], [1, 6, 7], [1, 6, 8], [1, 6, 9],
            [1, 7, 7], [1, 7, 8], [1, 7, 9],
            [1, 8, 8], [1, 8, 9],
            [1, 9, 9],
            [2, 2, 2], [2, 2, 3], [2, 2, 4], [2, 2, 5], [2, 2, 6], [2, 2, 7], [2, 2, 8], [2, 2, 9],
            [2, 3, 3], [2, 3, 4], [2, 3, 5], [2, 3, 6], [2, 3, 7], [2, 3, 8], [2, 3, 9],
            [2, 4, 4], [2, 4, 5], [2, 4, 6], [2, 4, 7], [2, 4, 8], [2, 4, 9],
            [2, 5, 5], [2, 5, 6], [2, 5, 7], [2, 5, 8], [2, 5, 9],
            [2, 6, 6], [2, 6, 7], [2, 6, 8], [2, 6, 9],
            [2, 7, 7], [2, 7, 8], [2, 7, 9],
            [2, 8, 8], [2, 8, 9],
            [2, 9, 9],
            [3, 3, 3], [3, 3, 4], [3, 3, 5], [3, 3, 6], [3, 3, 7], [3, 3, 8], [3, 3, 9],
            [3, 4, 4], [3, 4, 5], [3, 4, 6], [3, 4, 7], [3, 4, 8], [3, 4, 9],
            [3, 5, 5], [3, 5, 6], [3, 5, 7], [3, 5, 8], [3, 5, 9],
            [3, 6, 6], [3, 6, 7], [3, 6, 8], [3, 6, 9],
            [3, 7, 7], [3, 7, 8], [3, 7, 9],
            [3, 8, 8], [3, 8, 9],
            [3, 9, 9],
            [4, 4, 4], [4, 4, 5], [4, 4, 6], [4, 4, 7], [4, 4, 8], [4, 4, 9],
            [4, 5, 5], [4, 5, 6], [4, 5, 7], [4, 5, 8], [4, 5, 9],
            [4, 6, 6], [4, 6, 7], [4, 6, 8], [4, 6, 9],
            [4, 7, 7], [4, 7, 8], [4, 7, 9],
            [4, 8, 8], [4, 8, 9],
            [4, 9, 9],
            [5, 5, 5], [5, 5, 6], [5, 5, 7], [5, 5, 8], [5, 5, 9],
            [5, 6, 6], [5, 6, 7], [5, 6, 8], [5, 6, 9],
            [5, 7, 7], [5, 7, 8], [5, 7, 9],
            [5, 8, 8], [5, 8, 9],
            [5, 9, 9],
            [6, 6, 6], [6, 6, 7], [6, 6, 8], [6, 6, 9],
            [6, 7, 7], [6, 7, 8], [6, 7, 9],
            [6, 8, 8], [6, 8, 9],
            [6, 9, 9],
            [7, 7, 7], [7, 7, 8], [7, 7, 9],
            [7, 8, 8], [7, 8, 9],
            [7, 9, 9],
            [8, 8, 8], [8, 8, 9],
            [8, 9, 9],
            [9, 9, 9]
            ]
      nums 3 `shouldBe` ns

  describe "factSum" $ do
    it "returns 0 when ds = []" $ do
      factSum [] `shouldBe` 0
    it "returns 1 when ds = [0]" $ do
      factSum [0] `shouldBe` 1
    it "returns 2 when ds = [1,0]" $ do
      factSum [1, 0] `shouldBe` 2
    it "returns 4 when ds = [1,0,2]" $ do
      factSum [1, 0, 2] `shouldBe` 4
    it "returns 10 when ds = [1,0,2,3]" $ do
      factSum [1, 0, 2, 3] `shouldBe` 10

  describe "isDigitFactorial" $ do
    it "returns True when n = 145" $ do
      isDigitFactorial 145 `shouldBe` True
    it "returns False when n = 140" $ do
      isDigitFactorial 140 `shouldBe` False

  describe "solve" $ do
    it "is 40730" $ do
      solve `shouldBe` 40730
